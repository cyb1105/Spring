{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","apiUrl","Form","state","todo","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","dispatch","axios","post","then","res","type","payload","data","catch","error","console","log","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","todoText","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todos","todoList","map","get","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.471fea2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\n//function TodoListTemplate(props) {\r\nconst TodoListTemplate = ({form,children}) => {\r\n    return (\r\n        <div className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                LIST ({process.env.REACT_APP_TITLE})\r\n            </div>\r\n            <div className=\"form-wrapper\">\r\n                {form}\r\n            </div>\r\n            <div className=\"todos-wrapper\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTemplate;","import axios from 'axios';\r\n//Action type 정의\r\nexport const FETCH_TODOS = \"FETCH_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n\r\n\r\n//server url\r\nconst apiUrl = process.env.REACT_APP_APIURL;\r\n//'http://localhost:8083/todos';\r\n\r\n//Action 생성함수 선언\r\n\r\n//4.토글링\r\nexport const toggleTodo = todo => {\r\n    return (dispatch) => {\r\n        axios.put(`${apiUrl}/${todo.id}`, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: TOGGLE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n//3.todo삭제\r\nexport const removeTodo = id => {\r\n    return (dispatch) => {\r\n        axios.delete(`${apiUrl}/${id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//2.todo등록\r\nexport const addTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.post(apiUrl, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//1.todo 목록\r\nexport const fetchAllTodos = () => {\r\n    return (dispatch) => {\r\n        axios.get(apiUrl)\r\n            .then(res => {\r\n                dispatch({\r\n                    // 요청이 성공하면, 서버 응답내용을 payload로 설정하여\r\n                    // FETCH_TODOS 액션을 디스패치 합니다.\r\n                    type: FETCH_TODOS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport \"./Form.css\";\r\nimport { addTodo } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        todo: \"\"\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        })\r\n    };\r\n    handleCreate = () => {\r\n        const {todo} = this.state;\r\n        this.props.addTodo(\r\n            {\r\n                text: todo,\r\n                checked: false,\r\n            });\r\n        this.setState({\r\n            todo: ''\r\n        })\r\n    };\r\n    handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    };\r\n    render() {\r\n        const { todo } = this.state\r\n        const { handleChange, handleCreate, handleKeyPress } = this;\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={todo} onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate}>\r\n                    추가\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { addTodo })(Form);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from '../actions';\r\n\r\nimport './TodoItem.css'\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n    handleRemove = (id) => {\r\n        this.props.removeTodo(id);\r\n    }\r\n    handleToggle = (todo) => {\r\n        this.props.toggleTodo(todo)\r\n    }\r\n\r\n    render() {\r\n        const { todoText, checked, id } = this.props\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => {\r\n                const todo = { text:todoText, checked, id };\r\n                todo.checked = !todo.checked;\r\n                this.handleToggle(todo)\r\n            }}>\r\n                <div className=\"remove\" onClick={(e) => { e.stopPropagation(); this.handleRemove(id) }}>\r\n                    &times;\r\n                </div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{todoText}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { removeTodo, toggleTodo })(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { connect } from 'react-redux'\r\nimport { fetchAllTodos } from '../actions'\r\n\r\nclass TodoItemList extends Component {\r\n    //life-cycle메서드 \r\n    componentDidMount() {\r\n        this.props.fetchAllTodos();\r\n    }\r\n\r\n    //life-cycle메서드 overriding : render() 메서드의 호출을 줄일 수 있다.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n\r\n    }\r\n    render() {\r\n        const { todos } = this.props;\r\n        const todoList = todos.map(({ id, checked, text }) => (\r\n            <TodoItem id={id} checked={checked} todoText={text}  key={id} />\r\n        ));\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchAllTodos })(TodoItemList);\r\n","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <TodoListTemplate form={<Form />}>\n          <TodoItemList />\n        </TodoListTemplate>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions';\r\nconst initialState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            text: '',\r\n            checked: false,\r\n        }\r\n    ]\r\n}\r\nexport const toDoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        case ADD_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        case REMOVE_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        case TOGGLE_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { toDoReducer } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(toDoReducer,  composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}